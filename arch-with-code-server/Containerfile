FROM archlinux:base-devel

ENV UID=1000
ENV GID=1000
ARG USER=evert
ENV USER=$USER

# TODO make ENV's also ARG's?
# ARG foo
# ENV foo=$foo
# Note that ENV/VAR definitions reset after a FROM

# ------------------------ Install stuff ------------------------

RUN pacman -Syu --noconfirm

RUN groupadd -g $GID $USER && useradd -m -u $UID -g $GID -s /bin/fish $USER
RUN echo "$USER ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

RUN systemd-machine-id-setup

# Install paru from AUR (takes a relatively long time to compile)
RUN pacman -S --noconfirm git
RUN sudo -u $USER bash -c "git clone https://aur.archlinux.org/paru.git /tmp/paru && cd /tmp/paru && makepkg -si --noconfirm" \
    && rm -rf /tmp/paru

# Install code-server (takes a bit of time to compile)
RUN sudo -u $USER bash -c "paru -S --noconfirm code-server"

# System mgmt
RUN pacman -S --noconfirm pkgfile
# Podman (in podman)
RUN pacman -S --noconfirm podman fuse-overlayfs
# Terminal stuff
RUN pacman -S --noconfirm less nano fish ripgrep tree htop bat fzf tmux tree jq
# Programming
RUN pacman -S --noconfirm python python-pexpect python-pillow python-poetry jedi-language-server python-jedi nodejs npm go jupyterlab clang rust-analyzer gopls shellcheck
# Debugging
RUN pacman -S --noconfirm strace valgrind gdb
# Network
RUN pacman -S --noconfirm openssh openvpn traceroute nmap wget tcpdump socat net-tools rsync

# Clean up
RUN pacman -Sc --noconfirm

RUN npm install --global pnpm

USER $USER
RUN code-server --install-extension ms-python.python
RUN code-server --install-extension llvm-vs-code-extensions.vscode-clangd
RUN code-server --install-extension rust-lang.rust-analyzer
RUN code-server --install-extension eamodio.gitlens
RUN code-server --install-extension alefragnani.bookmarks
RUN code-server --install-extension ms-toolsai.jupyter
RUN code-server --install-extension golang.go
RUN code-server --install-extension timonwong.shellcheck
RUN code-server --install-extension github.github-vscode-theme
USER root


# ------------------------ Configs ------------------------

RUN pkgfile --update

RUN echo 'include /usr/share/nano/*.nanorc' >> /etc/nanorc

RUN mkdir -p /var/lib/systemd/linger && touch /var/lib/systemd/linger/$USER

CMD [ "/sbin/init" ]

# Make Arch PINP work
RUN cat <<EOF > /etc/containers/storage.conf
[storage]
driver = "overlay"
runroot = "/run/containers/storage"
graphroot = "/var/lib/containers/storage"

[storage.options]
mount_program = "/usr/bin/fuse-overlayfs"
additionalimagestores = []

[storage.options.pull_options]

[storage.options.overlay]
mountopt = "nodev"
EOF


RUN cat <<EOF >/etc/containers/containers.conf
# was present in containers.conf already
[containers]
default_sysctls = [
  "net.ipv4.ping_group_range=0 0",
]

# had to modify, see https://github.com/containers/podman/issues/6368#issuecomment-633921800
[engine]
cgroup_manager = "cgroupfs"

EOF

# Also for PINP rootless
RUN setcap cap_setuid,cap_setgid=eip /usr/sbin/newuidmap
RUN setcap cap_setuid,cap_setgid=eip /usr/sbin/newgidmap

COPY ./setup-code-server.sh /usr/bin/setup-code-server.sh
RUN chmod +x /usr/bin/setup-code-server.sh

USER $USER

RUN mkdir -p ~/.config/fish/
RUN cat <<EOF > ~/.config/fish/config.fish
set -x XDG_RUNTIME_DIR /run/user/$UID
set -x DBUS_SESSION_BUS_ADDRESS unix:path=/run/user/$UID/bus
set -x SSH_AUTH_SOCK /home/$USER/ssh-agent.socket
set -x GIT_EDITOR nano
set -x EDITOR nano
EOF

USER root

LABEL probox.post_create /usr/bin/setup-code-server.sh
